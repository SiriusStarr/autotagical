let List/map =
        https://prelude.dhall-lang.org/List/map sha256:dd845ffb4568d40327f2a817eb42d1c6138b929ca758d50bc33112ef3c885680
      ? https://prelude.dhall-lang.org/List/map

let Folder =
        ../../Internal/SortingSchema/Folder sha256:bec2134c606d713bbb01d757a4f5d30cb7e798d8c2efea3cbe0d52b1916b2ebd
      ? ../../Internal/SortingSchema/Folder

let NameTemplate =
        ../../Internal/NameTemplate/Folder/Type sha256:64c9b5b4460cf305506169a8bfe165370816c6f6496bd4c3eb7234e9789f28d1
      ? ../../Internal/NameTemplate/Folder/Type

let Predicate =
        ../../Internal/Predicate/Type sha256:7bbd5275d9b92c0c5b1c7c0f05885b85796a14c4813d02aae7148a9d418deedf
      ? ../../Internal/Predicate/Type

in  λ(name : NameTemplate) →
    λ(predicate : Predicate) →
    λ(subfolders : List Folder) →
    λ(Folder : Type) →
    λ ( Fix
      : { nameF : NameTemplate
        , predicateF : Predicate
        , subfoldersF : List Folder
        } →
          Folder
      ) →
      Fix
        { nameF = name
        , predicateF = predicate
        , subfoldersF =
            List/map Folder@1 Folder (λ(f : Folder@1) → f Folder Fix) subfolders
        }
