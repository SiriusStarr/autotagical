let List/map =
        https://prelude.dhall-lang.org/List/map sha256:dd845ffb4568d40327f2a817eb42d1c6138b929ca758d50bc33112ef3c885680
      ? https://prelude.dhall-lang.org/List/map

let Folder =
        ../../Internal/SortingSchema/Folder sha256:0c185e7ee40b8477af154373176956de56aa754b40ee64efbfb2140a494791df
      ? ../../Internal/SortingSchema/Folder

let NameTemplate =
        ../../Internal/NameTemplate/Folder/Type sha256:4b5ee9941c2398c2749b45d9324fdb122c8a149bd2fe4b17305a550c9559b55d
      ? ../../Internal/NameTemplate/Folder/Type

let Predicate =
        ../../Internal/Predicate/Type sha256:39e210b82052eda7f6cd4814c3d907c727b2ebea1c3c135957eef943014b46e9
      ? ../../Internal/Predicate/Type

in  λ(name : NameTemplate) →
    λ(predicate : Predicate) →
    λ(subfolders : List Folder) →
    λ(Folder : Type) →
    λ ( Fix
      : { nameF : NameTemplate
        , predicateF : Predicate
        , subfoldersF : List Folder
        } →
          Folder
      ) →
      Fix
        { nameF = name
        , predicateF = predicate
        , subfoldersF =
            List/map Folder@1 Folder (λ(f : Folder@1) → f Folder Fix) subfolders
        }
