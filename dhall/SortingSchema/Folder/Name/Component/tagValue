let Case =
        ../../../../Internal/NameTemplate/Case sha256:9e2d5a3c338b63a4e067de578f9e65952648ed6ffcf4ee0caaa211cdb2b3a3c5
      ? ../../../../Internal/NameTemplate/Case

let Interpret =
        ../../../../Internal/NameTemplate/Interpret sha256:da352ee981f47618957222659071fb284597087a51e9426729b3fde383c77a91
      ? ../../../../Internal/NameTemplate/Interpret

let Predicate =
        ../../../../Internal/Predicate/Type sha256:39e210b82052eda7f6cd4814c3d907c727b2ebea1c3c135957eef943014b46e9
      ? ../../../../Internal/Predicate/Type

let Tag =
        ../../../../Internal/Tag/Type sha256:3791aa7a52b92db3877472c57cec53ca856858bbad81156ef1bf29e9aeb2baee
      ? ../../../../Internal/Tag/Type

in  λ(t : Tag) →
    λ(Component : Type) →
      let ComponentF =
            < FolderFormatAsF : { componentF : Component, formatCaseF : Case }
            | FolderIfThenElseF :
                { predicateF : Predicate
                , trueComponentsF : List Component
                , falseComponentsF : List Component
                }
            | FolderInterpretF :
                { componentF : Component, interpretAsF : Interpret }
            | FolderOriginalNameF
            | FolderTagValueF : Tag
            | FolderTextLiteralF : Text
            >

      in  λ(Fix : ComponentF → Component) → Fix (ComponentF.FolderTagValueF t)
