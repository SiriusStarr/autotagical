let Case =
        ../Case sha256:9e2d5a3c338b63a4e067de578f9e65952648ed6ffcf4ee0caaa211cdb2b3a3c5
      ? ../Case

let Interpret =
        ../Interpret sha256:da352ee981f47618957222659071fb284597087a51e9426729b3fde383c77a91
      ? ../Interpret

let Predicate =
        ../../Predicate/Type sha256:7bbd5275d9b92c0c5b1c7c0f05885b85796a14c4813d02aae7148a9d418deedf
      ? ../../Predicate/Type

let Tag =
        ../../Tag/Type sha256:3791aa7a52b92db3877472c57cec53ca856858bbad81156ef1bf29e9aeb2baee
      ? ../../Tag/Type

in  ∀(Component : Type) →
    ∀ ( Fix
      : < FileDuplicateNumberF
        | FileFormatAsF : { componentF : Component, formatCaseF : Case }
        | FileIfDuplicateF : List Component
        | FileIfThenElseF :
            { predicateF : Predicate
            , trueComponentsF : List Component
            , falseComponentsF : List Component
            }
        | FileInterpretF : { componentF : Component, interpretAsF : Interpret }
        | FileOriginalNameF
        | FileTagValueF : Tag
        | FileTextLiteralF : Text
        > →
          Component
      ) →
      Component
