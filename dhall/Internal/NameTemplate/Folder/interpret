let Case =
        ../Case sha256:9e2d5a3c338b63a4e067de578f9e65952648ed6ffcf4ee0caaa211cdb2b3a3c5
      ? ../Case

let Component =
        ./Component sha256:97d4453e4304630b61cc9205b7b1c34b6998bb36dfb1483b8dca592f18b2b3d6
      ? ./Component

let Interpret =
        ../Interpret sha256:da352ee981f47618957222659071fb284597087a51e9426729b3fde383c77a91
      ? ../Interpret

let Predicate =
        ../../Predicate/Type sha256:39e210b82052eda7f6cd4814c3d907c727b2ebea1c3c135957eef943014b46e9
      ? ../../Predicate/Type

let Tag =
        ../../Tag/Type sha256:3791aa7a52b92db3877472c57cec53ca856858bbad81156ef1bf29e9aeb2baee
      ? ../../Tag/Type

in  λ(interpret : Interpret) →
    λ(component : Component) →
    λ(Component : Type) →
      let ComponentF =
            < FolderFormatAsF : { componentF : Component, formatCaseF : Case }
            | FolderIfThenElseF :
                { predicateF : Predicate
                , trueComponentsF : List Component
                , falseComponentsF : List Component
                }
            | FolderInterpretF :
                { componentF : Component, interpretAsF : Interpret }
            | FolderOriginalNameF
            | FolderTagValueF : Tag
            | FolderTextLiteralF : Text
            >

      in  λ(Fix : ComponentF → Component) →
            Fix
              ( ComponentF.FolderInterpretF
                  { componentF = component Component Fix
                  , interpretAsF = interpret
                  }
              )
