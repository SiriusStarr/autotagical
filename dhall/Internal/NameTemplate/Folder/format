let Case =
        ../Case sha256:9e2d5a3c338b63a4e067de578f9e65952648ed6ffcf4ee0caaa211cdb2b3a3c5
      ? ../Case

let Component =
        ./Component sha256:713526b7c7b3d4e4b448d56db8d09cb81fbbd06e9ea58a08625f19a9aec3e01a
      ? ./Component

let Interpret =
        ../Interpret sha256:12b04186b544ddeb7eea9e853345e2c45533d11bcb3dd76e88b15819f99837d0
      ? ../Interpret

let Predicate =
        ../../Predicate/Type sha256:f2e4edafdd41ade5527a645f9ae16fb31325419b6bf340c6a81dfa32b60d2462
      ? ../../Predicate/Type

let Tag =
        ../../Tag/Type sha256:3791aa7a52b92db3877472c57cec53ca856858bbad81156ef1bf29e9aeb2baee
      ? ../../Tag/Type

in  λ(case : Case) →
    λ(component : Component) →
    λ(Component : Type) →
      let ComponentF =
            < FolderFormatAsF :
                { getFolderFormatCaseF : Case
                , getFolderFormatComponentF : Component
                }
            | FolderIfThenElseF :
                { getFolderIfPredicateF : Predicate
                , getFolderIfTrueComponentsF : List Component
                , getFolderIfFalseComponentsF : List Component
                }
            | FolderInterpretF :
                { getFolderInterpretAsF : Interpret
                , getFolderInterpretComponentF : Component
                }
            | FolderOriginalNameF
            | FolderTagValueF : Tag
            | FolderTextLiteralF : Text
            >

      in  λ(Fix : ComponentF → Component) →
            Fix
              ( ComponentF.FolderFormatAsF
                  { getFolderFormatCaseF = case
                  , getFolderFormatComponentF = component Component Fix
                  }
              )
