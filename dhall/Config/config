let Config =
        ../Internal/Config/Type sha256:14a3e92350551a1df0cc16abe667962cdecdcd345615deee44a53d086a240a25
      ? ../Internal/Config/Type

let GlobPatterns =
        ../Internal/GlobPatterns/Type sha256:26a29e0113646fb623fba2a6657b31b99127b689d510ef6761df7dd49da8a5bb
      ? ../Internal/GlobPatterns/Type

let LogDestination =
        ../Internal/Logging/LogDestination sha256:47393d4c5bdc46697670d9b6d4c73c4875c1df2f2cf2f1cbe68b2afe03c0816f
      ? ../Internal/Logging/LogDestination

let LogLevel =
        ../Internal/Logging/LogLevel sha256:8b0ef97f0f052a52dd67e11fa031d0efe3ff18c020f9911ab2179066dee3922e
      ? ../Internal/Logging/LogLevel

let OutputFormat =
        ../Internal/OutputFormat/Type sha256:90a967648257956b041755ef770b4d5a1adce53345a9443d872080c2f511ca2c
      ? ../Internal/OutputFormat/Type

let Renaming =
        ../Internal/Config/Renaming sha256:1b049c62075c2bf960726ffbe1d6cda2590560510deaaf51e91da6ca99cd7a5e
      ? ../Internal/Config/Renaming

in  { Type = Config
    , default =
      { clobberDestination = None Text
      , dryRun = False
      , ignorePatterns = None GlobPatterns
      , keepCopyInInputFolder = False
      , logDestination = LogDestination.StdOut
      , logLevel = LogLevel.Warn
      , outputFormat = None OutputFormat
      , renaming = None Renaming
      }
    }
